"use strict";(self.webpackChunkapi_rushstack_io=self.webpackChunkapi_rushstack_io||[]).push([[55804],{50158:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var a=r(46393);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),m=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=m(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=m(r),d=n,y=c["".concat(i,".").concat(d)]||c[d]||u[d]||o;return r?a.createElement(y,l(l({ref:t},s),{},{components:r})):a.createElement(y,l({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=c;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var m=2;m<o;m++)l[m]=r[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},9476:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var a=r(20216),n=(r(46393),r(50158));const o={hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},l=void 0,p={unversionedId:"pages/node-core-library.import.lazy",id:"pages/node-core-library.import.lazy",title:"node-core-library.import.lazy",description:"Home &gt; @rushstack/node-core-library &gt; Import &gt; lazy",source:"@site/docs/pages/node-core-library.import.lazy.md",sourceDirName:"pages",slug:"/pages/node-core-library.import.lazy",permalink:"/pages/node-core-library.import.lazy",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"docsSidebar"},i={},m=[{value:"Import.lazy() method",id:"importlazy-method",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Remarks",id:"remarks",level:2}],s={toc:m};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/pages/"},"Home")," ",">"," ",(0,n.kt)("a",{parentName:"p",href:"/pages/node-core-library"},"@rushstack/node-core-library")," ",">"," ",(0,n.kt)("a",{parentName:"p",href:"/pages/node-core-library.import"},"Import")," ",">"," ",(0,n.kt)("a",{parentName:"p",href:"/pages/node-core-library.import.lazy"},"lazy")),(0,n.kt)("h2",{id:"importlazy-method"},"Import.lazy() method"),(0,n.kt)("p",null,"Provides a way to improve process startup times by lazy-loading imported modules."),(0,n.kt)("b",null,"Signature:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"static lazy(moduleName: string, require: (id: string) => unknown): any;\n")),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"moduleName"),(0,n.kt)("td",{parentName:"tr",align:null},"string"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"require"),(0,n.kt)("td",{parentName:"tr",align:null},"(id: string) =",">"," unknown"),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("b",null,"Returns:"),(0,n.kt)("p",null,"any"),(0,n.kt)("h2",{id:"remarks"},"Remarks"),(0,n.kt)("p",null,"This is a more structured wrapper for the ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/import-lazy"},"import-lazy")," package. It enables you to replace an import like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import * as example from 'example'; // <-- 100ms load time\n\nif (condition) {\n  example.doSomething();\n}\n")),(0,n.kt)("p",null,"...with a pattern like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const example: typeof import('example') = Import.lazy('example', require);\n\nif (condition) {\n  example.doSomething(); // <-- 100ms load time occurs here, only if needed\n}\n")),(0,n.kt)("p",null,"The implementation relies on JavaScript's ",(0,n.kt)("inlineCode",{parentName:"p"},"Proxy")," feature to intercept access to object members. Thus it will only work correctly with certain types of module exports. If a particular export isn't well behaved, you may need to find (or introduce) some other module in your dependency graph to apply the optimization to."),(0,n.kt)("p",null,"Usage guidelines:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Always specify types using ",(0,n.kt)("inlineCode",{parentName:"p"},"typeof")," as shown above.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Never apply lazy-loading in a way that would convert the module's type to ",(0,n.kt)("inlineCode",{parentName:"p"},"any")," . Losing type safety seriously impacts the maintainability of the code base.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"In cases where the non-runtime types are needed, import them separately using the ",(0,n.kt)("inlineCode",{parentName:"p"},"Types")," suffix:"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const example: typeof import('example') = Import.lazy('example', require);\nimport type * as exampleTypes from 'example';\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If the imported module confusingly has the same name as its export, then use the Module suffix:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const exampleModule: typeof import('../../logic/Example') = Import.lazy('../../logic/Example', require);\nimport type * as exampleTypes from '../../logic/Example';\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"If the exports cause a lot of awkwardness (e.g. too many expressions need to have ",(0,n.kt)("inlineCode",{parentName:"p"},"exampleModule.")," inserted into them), or if some exports cannot be proxied (e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"Import.lazy('example', require)")," returns a function signature), then do not lazy-load that module. Instead, apply lazy-loading to some other module which is better behaved.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"It's recommended to sort imports in a standard ordering:"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"// 1. external imports\nimport * as path from 'path';\nimport { Import, JsonFile, JsonObject } from '@rushstack/node-core-library';\n\n// 2. local imports\nimport { LocalFile } from './path/LocalFile';\n\n// 3. lazy-imports (which are technically variables, not imports)\nconst semver: typeof import('semver') = Import.lazy('semver', require);\n")))}u.isMDXComponent=!0}}]);