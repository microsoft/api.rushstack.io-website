"use strict";(self.webpackChunkapi_rushstack_io=self.webpackChunkapi_rushstack_io||[]).push([[65606],{50158:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var r=a(46393);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),o=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},c=function(e){var t=o(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=o(a),u=n,d=g["".concat(l,".").concat(u)]||g[u]||h[u]||s;return a?r.createElement(d,p(p({ref:t},c),{},{components:a})):r.createElement(d,p({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,p=new Array(s);p[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,p[1]=i;for(var o=2;o<s;o++)p[o]=a[o];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},73442:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>g,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var r=a(20216),n=a(46393),s=a(50158);const p={hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},i=void 0,l={unversionedId:"pages/package-deps-hash",id:"pages/package-deps-hash",title:"package-deps-hash",description:"Home &gt; @rushstack/package-deps-hash",source:"@site/docs/pages/package-deps-hash.md",sourceDirName:"pages",slug:"/pages/package-deps-hash",permalink:"/pages/package-deps-hash",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"docsSidebar"},o={},c=[{value:"package-deps-hash package",id:"package-deps-hash-package",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Functions",id:"functions",level:2},{value:"Interfaces",id:"interfaces",level:2}],h={toc:c};function g(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/pages/"},"Home")," ",">"," ",(0,s.kt)("a",{parentName:"p",href:"/pages/package-deps-hash"},"@rushstack/package-deps-hash")),(0,s.kt)("h2",{id:"package-deps-hash-package"},"package-deps-hash package"),(0,s.kt)("p",null,"This package builds a JSON object containing the git hashes of all files used to produce a given NPM package. The ",(0,s.kt)("a",{parentName:"p",href:"https://rushjs.io/"},"Rush")," tool uses this library to implement incremental build detection."),(0,s.kt)("h2",{id:"remarks"},"Remarks"),(0,s.kt)("p",null,"For more info, please see the package ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@rushstack/package-deps-hash"},"README"),(0,s.kt)(n.Fragment,null),"."),(0,s.kt)("h2",{id:"functions"},"Functions"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Function"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/pages/package-deps-hash.ensuregitminimumversion"},"ensureGitMinimumVersion(gitPath)")),(0,s.kt)("td",{parentName:"tr",align:null},"Checks the git version and throws an error if it is less than the minimum required version.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/pages/package-deps-hash.getgithashforfiles"},"getGitHashForFiles(filesToHash, packagePath, gitPath)")),(0,s.kt)("td",{parentName:"tr",align:null},"Takes a list of files and returns the current git hashes for them")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/pages/package-deps-hash.getpackagedeps"},"getPackageDeps(packagePath, excludedPaths, gitPath)")),(0,s.kt)("td",{parentName:"tr",align:null},"Builds an object containing hashes for the files under the specified ",(0,s.kt)("code",null,"packagePath")," folder.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/pages/package-deps-hash.getrepochanges"},"getRepoChanges(currentWorkingDirectory, revision, gitPath)")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("em",{parentName:"strong"},"(BETA)"))," Find all changed files tracked by Git, their current hashes, and the nature of the change. Only useful if all changes are staged or committed.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/pages/package-deps-hash.getreporoot"},"getRepoRoot(currentWorkingDirectory, gitPath)")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("em",{parentName:"strong"},"(BETA)"))," Finds the root of the current Git repository")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/pages/package-deps-hash.getrepostateasync"},"getRepoStateAsync(rootDirectory, additionalRelativePathsToHash, gitPath)")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("em",{parentName:"strong"},"(BETA)"))," Gets the object hashes for all files in the Git repo, combining the current commit with working tree state. Uses async operations and runs all primary Git calls in parallel.")))),(0,s.kt)("h2",{id:"interfaces"},"Interfaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Interface"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/pages/package-deps-hash.ifilediffstatus"},"IFileDiffStatus")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("em",{parentName:"strong"},"(BETA)"))," Information about the changes to a file.")))))}g.isMDXComponent=!0}}]);