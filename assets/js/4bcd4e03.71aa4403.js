"use strict";(self.webpackChunkapi_rushstack_io=self.webpackChunkapi_rushstack_io||[]).push([[91304],{50158:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var a=r(46393);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),s=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(r),g=n,d=c["".concat(i,".").concat(g)]||c[g]||m[g]||p;return r?a.createElement(d,l(l({ref:t},u),{},{components:r})):a.createElement(d,l({ref:t},u))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,l=new Array(p);l[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<p;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},97022:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=r(20216),n=r(46393),p=r(50158);const l={hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},o=void 0,i={unversionedId:"pages/tree-pattern.treepattern.tag",id:"pages/tree-pattern.treepattern.tag",title:"tree-pattern.treepattern.tag",description:"Home &gt; @rushstack/tree-pattern &gt; TreePattern &gt; tag",source:"@site/docs/pages/tree-pattern.treepattern.tag.md",sourceDirName:"pages",slug:"/pages/tree-pattern.treepattern.tag",permalink:"/pages/tree-pattern.treepattern.tag",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"docsSidebar"},s={},u=[{value:"TreePattern.tag() method",id:"treepatterntag-method",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Remarks",id:"remarks",level:2}],m={toc:u};function c(e){let{components:t,...r}=e;return(0,p.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"/pages/"},"Home")," ",">"," ",(0,p.kt)("a",{parentName:"p",href:"/pages/tree-pattern"},"@rushstack/tree-pattern")," ",">"," ",(0,p.kt)("a",{parentName:"p",href:"/pages/tree-pattern.treepattern"},"TreePattern")," ",">"," ",(0,p.kt)("a",{parentName:"p",href:"/pages/tree-pattern.treepattern.tag"},"tag")),(0,p.kt)("h2",{id:"treepatterntag-method"},"TreePattern.tag() method"),(0,p.kt)("p",null,"Labels a subtree within the search pattern, so that the matching object can be retrieved."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Signature:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"static tag(tagName: string, subtree?: TreeNode): TreeNode;\n")),(0,p.kt)("h2",{id:"parameters"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,p.kt)("th",{parentName:"tr",align:null},"Type"),(0,p.kt)("th",{parentName:"tr",align:null},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"tagName"),(0,p.kt)("td",{parentName:"tr",align:null},"string"),(0,p.kt)("td",{parentName:"tr",align:null})),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"subtree"),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"/pages/tree-pattern.treenode"},"TreeNode")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("em",{parentName:"td"},"(Optional)"))))),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returns:")),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"/pages/tree-pattern.treenode"},"TreeNode")),(0,p.kt)("h2",{id:"remarks"},"Remarks"),(0,p.kt)("p",null,"Used to build the ",(0,p.kt)("inlineCode",{parentName:"p"},"pattern")," tree for ",(0,p.kt)("a",{parentName:"p",href:"/pages/tree-pattern.treepattern.match"},"TreePattern.match()"),(0,p.kt)(n.Fragment,null),". For the given ",(0,p.kt)("inlineCode",{parentName:"p"},"subtree")," of the pattern, if it is matched, that node will be assigned to the ",(0,p.kt)("inlineCode",{parentName:"p"},"captures")," object using ",(0,p.kt)("inlineCode",{parentName:"p"},"tagName")," as the key."),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"const myCaptures: { personName?: string } = {};\nconst myPattern = {\n  name: TreePattern.tag('personName')\n};\nif (myPattern.match({ name: 'Bob' }, myCaptures)) {\n  console.log(myCaptures.personName);\n}\n")))}c.isMDXComponent=!0}}]);