"use strict";(self.webpackChunkapi_rushstack_io=self.webpackChunkapi_rushstack_io||[]).push([[86503],{50158:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var a=r(46393);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),c=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,i=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=c(r),d=n,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||p;return r?a.createElement(h,l(l({ref:t},s),{},{components:r})):a.createElement(h,l({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,l=new Array(p);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<p;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},11368:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>p,metadata:()=>o,toc:()=>c});var a=r(20216),n=(r(46393),r(50158));const p={hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},l=void 0,o={unversionedId:"pages/tree-pattern.treepattern.match",id:"pages/tree-pattern.treepattern.match",title:"tree-pattern.treepattern.match",description:"Home &gt; @rushstack/tree-pattern &gt; TreePattern &gt; match",source:"@site/docs/pages/tree-pattern.treepattern.match.md",sourceDirName:"pages",slug:"/pages/tree-pattern.treepattern.match",permalink:"/pages/tree-pattern.treepattern.match",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"docsSidebar"},i={},c=[{value:"TreePattern.match() method",id:"treepatternmatch-method",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Remarks",id:"remarks",level:2}],s={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/pages/"},"Home")," ",">"," ",(0,n.kt)("a",{parentName:"p",href:"/pages/tree-pattern"},"@rushstack/tree-pattern")," ",">"," ",(0,n.kt)("a",{parentName:"p",href:"/pages/tree-pattern.treepattern"},"TreePattern")," ",">"," ",(0,n.kt)("a",{parentName:"p",href:"/pages/tree-pattern.treepattern.match"},"match")),(0,n.kt)("h2",{id:"treepatternmatch-method"},"TreePattern.match() method"),(0,n.kt)("p",null,"Match an input tree."),(0,n.kt)("b",null,"Signature:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"match(root: TreeNode, captures?: ITreePatternCaptureSet): boolean;\n")),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"root"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/pages/tree-pattern.treenode"},"TreeNode")),(0,n.kt)("td",{parentName:"tr",align:null},"the input tree to be matched")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"captures"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/pages/tree-pattern.itreepatterncaptureset"},"ITreePatternCaptureSet")),(0,n.kt)("td",{parentName:"tr",align:null},"an optional object to receive any subtrees that were matched using ",(0,n.kt)("a",{parentName:"td",href:"/pages/tree-pattern.treepattern.tag"},"TreePattern.tag()"))))),(0,n.kt)("b",null,"Returns:"),(0,n.kt)("p",null,"boolean"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,n.kt)("inlineCode",{parentName:"p"},"root")," matches the pattern, or ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," otherwise"),(0,n.kt)("h2",{id:"remarks"},"Remarks"),(0,n.kt)("p",null,"Return true if the ",(0,n.kt)("inlineCode",{parentName:"p"},"root")," node matches the pattern. (If the ",(0,n.kt)("inlineCode",{parentName:"p"},"root")," node does not match, the child nodes are not recursively tested, since for an Abstract Syntax Tree the caller is typically an efficient visitor callback that already handles that job.)"),(0,n.kt)("p",null,"If the input matches the pattern, any tagged subtrees will be assigned to the ",(0,n.kt)("inlineCode",{parentName:"p"},"captures")," target object if provided. If the input does not match, the path of the mismatched node will be assigned to ",(0,n.kt)("inlineCode",{parentName:"p"},"captures.failPath")," ."))}u.isMDXComponent=!0}}]);